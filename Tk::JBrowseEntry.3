.\" Automatically generated by Pod::Man version 1.15
.\" Sat Jul  7 09:31:38 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be availabel.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "JBrowseEntry 1"
.TH JBrowseEntry 1 "perl v5.6.1" "2002-07-31" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Tk::JBrowseEntry \- Enhanced "combobox" entry widget with popup choices and keyboard bindings.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tk::JBrowseEntry;
.Ve
.Vb 6
\&    $b = $frame->JBrowseEntry(-label => "Label", -variable => \e$var, -choices => ["opt1", "opt2"]);
\&    $b->insert("end", "opt3");
\&    $b->insert("end", "opt4", "opt5");
\&    ...
\&    $b->pack;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
JBrowseEntry is an enhanced, (read severely hacked) version of BrowseEntry.  
JBrowseEntry combines a LabEntry (Label + Entry) widget with a button and 
a popupable dropdown list, which may also include a vertical scrollbar.  

JBrowseEntry widgets allow one to specify a full combo-box, a "readonly" 
box (text field allows user to type the 1st letter of an item to search for, 
but user may only ultimately select one of the items in the list), or a 
"textonly" version (drop-down list disabled), or a completely disabled 
widget.  

This widget is similar to other combo-boxes, ie. 	JComboBox, but has good 
keyboard bindings and allows for quick lookup/search within the listbox. 
pressing <RETURN> in entry field displays the dropdown box with the 
first entry most closly matching whatever's in the entry field highlighted. 
Pressing <RETURN> or <SPACE> in the listbox 
selects the highlighted entry and copies it to the text field and removes the 
listbox.  <ESC> removes the listbox from view.  
<UP> and <DOWN> arrows work the listbox as well as pressing a key, which will 
move the highlight to the next item starting with that letter/number, etc. 
<UP> and <DOWN> arrows pressed within the entry field circle through the 
various list options as well (unless "-state" is set to 'textonly').  
Set "-state" to "text" to disable the dropdown list, but allow <UP> and 
<DOWN> to cycle among the choices.  Setting "-state" to 'textonly' completely 
hides the choices list from the user - he must type in his choice just like 
a normal entry widget.

One may also specify whether or not the button which activates the 
dropdown list via the mouse can take focus or not (-btntakesfocus) or 
whether the widget itself can take focus or is skipped in the focusing 
order.  The developer can also specify alternate bitmap images for the 
button (-arrowimage and -farrowimage).  The developer can also specify the 
maximum length of the dropdown list such that if more than that number of 
items is added, a vertical scrollbar is automatically added (-height).  
A fixed width in characters (-width) can be specified, or the widget can be 
allowed to resize itself to the width of the longest string in the list.  The 
listbox and text entry field are automatically kept to the same width.

One can optionally specify a label (-label), similar to the "LabEntry" widget.  
By default, the label appears packed to the left of the widget.  The 
positioning can be specified via the "-labelPack" option.  For example, to 
position the label above the widget, use "-labelPack => [-side => 'top']".

JBrowseEntry supports 5 different states:
.Ip "\fB\-state => 'normal'\fR" 4
.IX Item "normal"
Default operation -- Both text entry field and dropdown list button function 
normally.
.Ip "\fB\-state => 'readonly'\fR" 4
.IX Item "readonly"
Dropdown list functions normally.  When text entry field has focus, user may 
type in a letter, and the dropdown list immediately drops down and the first/
next matching item becomes highlighted.  The user must ultimately select from 
the list of valid entries and may not enter anything else.
.Ip "\fB\-state => 'text'\fR" 4
.IX Item "text"
Text entry functions normally, but dropdown list button is disabled.  User 
must type in an entry or use the up and down arrows to choose from among the 
list items.
.Ip "\fB\-state => 'textonly'\fR" 4
.IX Item "textonly"
Similar to "text":  Text entry functions normally, but dropdown list button 
is disabled.  User must type in an entry.  The list choices are completely 
hidden from the user.
.Ip "\fB\-state => 'disabled'\fR" 4
.IX Item "disabled"
Widget is completely disabled and greyed out.  It will not activate or take 
focus.

JBrowseEntry supports all the options that BrowseEntry supports with the 
addition of the following options:
.Ip "\fB\-btntakesfocus\fR" 4
.IX Item "-btntakesfocus"
The dropdown list button is normally activated with the mouse and is skipped 
in the focusing circuit.  If this option is set, then the button will take 
keyboard focus.  Pressing <Return>, <Spacebar>, or <Downarrow> will cause the 
list to be dropped down, repeating causes the list to be removed again.  
Normally, the text entry widget receives the keyboard focus.  This option can 
be used in combination with "-takefocus" so that either the text entry widget, 
the button, or both or neither receive keyboard focus.  If both options are 
set, the entry field first receives focus, then pressing <Tab> causes the 
button to be focused.
.Ip "\fB\-farrowimage\fR" 4
.IX Item "-farrowimage"
Allows one to specify a second alternate bitmap for the image on the button 
which activates the dropdown list when the button has the keyboard focus.  
The default is to use the "-arrowimage" image.  This option should only be 
specified if the "-arrowimage" option is also specified.  See the "-arrowimage" 
option under Standard BrowseEntry options for more details.
.Ip "\fB\-height\fR" 4
.IX Item "-height"
Specify the maximum number of items to be displayed in the listbox before 
a vertical scrollbar is automatically added.  Default is infinity (listbox will 
not be given a scrollbar regardless of the number of items added).
.Ip "\fB\-labelPack\fR" 4
.IX Item "-labelPack"
Specify alternate packing options for the label.  The default is:
"[-side => 'left', -anchor => 'e']".  The argument is an arrayref.  Note:  if 
no label is specified, none is packed or displayed.
.Ip "\fB\-listfont\fR" 4
.IX Item "-listfont"
Specify an alternate font for the text in the listbox.  Use "-font" to change 
the text of the text entry field.  For best results, "-font" and "-listfont" 
should specify fonts of similar size.
.Ip "\fB\-noselecttext\fR" 4
.IX Item "-noselecttext"
Normally, when the widget has the focus, the current value is "selected" 
(highlighted and in the cut-buffer).  Some consider this unattractive in 
appearance, particularly with the "readonly" state, which appears as a raised 
button in Unix, similar to an "Optionmenu".  Setting this option will cause 
the text to not be selected.
.Ip "\fB\-width\fR" 4
.IX Item "-width"
The number of characters (average if proportional font used) wide to make the 
entry field.  The dropdown list will be set the same width as the entry widget 
plus the width of the button.  If not specified, the default is to calculate 
the width to the width of the longest item in the choices list and if items 
are later added or removed the width will be recalculated.

.IX Header "Standard BrowseEntry options"
Standard BrowseEntry options alsu supported by JBrowseEntry:
.Ip "\fB\-listwidth\fR" 4
.IX Item "-listwidth"
Specifies the width of the popup listbox.
.Ip "\fB\-variable\fR" 4
.IX Item "-variable"
Specifies the variable in which the entered value is to be stored.
.Ip "\fB\-browsecmd\fR" 4
.IX Item "-browsecmd"
Specifies a function to call when a selection is made in the
popped up listbox. It is passed the widget and the text of the
entry selected. This function is called after the entry variable
has been assigned the value.
.Ip "\fB\-listcmd\fR" 4
.IX Item "-listcmd"
Specifies the function to call when the button next to the entry
is pressed to popup the choices in the listbox. This is called before
popping up the listbox, so can be used to populate the entries in
the listbox.
.Ip "\fB\-listrelief\fR" 4
.IX Item "-listrelief"
Specifies relief for the dropdown list (default is "sunken").
.Ip "\fB\-maxwidth\fR" 4
.IX Item "-maxwidth"
Specifies the maximum width the entry and listbox widgets can expand to in 
characters.  The default is zero, meaning expand to the width to accomodate 
the widest string in the list.
.Ip "\fB\-tabcomplete\fR" 4
.IX Item "-tabcomplete"
If set to "1", pressing the "<Tab>" key will cause the string in the entry 
field to be "auto-completed" to the next matching item in the list.  If there 
is no match, the typed text is not changed.  If it already matches a list 
item, then the listbox is removed from view and keyboard focus transfers to 
the next widget.  If set to "2" and there is no match in the list, then 
entry is set to the default value or empty string.
.Ip "\fB\-arrowimage\fR" 4
.IX Item "-arrowimage"
Specifies the image to be used in the arrow button beside the entry
widget. The default is an downward arrow image in the file cbxarrow.xbm
.Ip "\fB\-choices\fR" 4
.IX Item "-choices"
Specifies the list of choices to pop up.  This is a reference to an
array of strings specifying the choices.
.Ip "\fB\-state\fR" 4
.IX Item "-state"
Specifies one of four states for the widget: "normal", "readonly", "textonly", 
or "disabled".  If the widget is "disabled" then the value may not be changed
and the arrow button won't activate.  If the widget is "readonly", the
entry may not be edited, but it may be changed by choosing a value
from the popup listbox.  "textonly" means the listbox will not activate.  
"normal" is the default.
.Ip "\fB\-colorstate\fR" 4
.IX Item "-colorstate"
Depreciated -- Appears to force the background of the entry widget on the 
Unix version to "grey95" if state is normal and a "-background" color is not 
specified.

Additional options tested and known to work as expected:
.Ip "\fB\-background\fR" 4
.IX Item "-background"
.Ip "\fB\-borderwidth\fR" 4
.IX Item "-borderwidth"
.Ip "\fB\-browse\fR" 4
.IX Item "-browse"
.Ip "\fB\-foreground\fR" 4
.IX Item "-foreground"

.SH "METHODS"
.IX Header "METHODS"

.Ip "\fBmy\fR \fB@choicelist\fR = \fBchoices\fR" 4
Returns an array containing the current choicelist.
.Ip "\fBchoices(\fR\fI[string1\fR\, \fIstring2\fR, \fIstring3, ...]\fR\fB)\fR" 4
.IX Item "choices(arrayref)"
Replaces the choicelist with the ones specified by \fIarrayref\fR;
.Ip "\fBinsert(\fR\fIindex\fR, \fIstring\fR\fB)\fR" 4
.Ip "\fBinsert(\fR\fIindex\fR, \fIstring1\fR\, \fIstring2\fR, \fIstring3, ...\fR\fB)\fR" 4
.Ip "\fBinsert(\fR\fIindex\fR, \fI[string1\fR\, \fIstring2\fR, \fIstring3, ...]\fR\fB)\fR" 4
.IX Item "insert(index, string)"
Inserts the text of \fIstring\fR at the specified \fIindex\fR. This string
then becomes availabel as one of the choices.
.Ip "\fBdelete(\fR\fIindex1\fR, \fIindex2\fR\fB)\fR" 4
.IX Item "delete(index1, index2)"
Deletes items from \fIindex1\fR to \fIindex2\fR.  \fBNOTE:\fR  the arrow button 
will be disabled and greyed out if the choice list becomes empty.
.SH "BUGS"
.IX Header "BUGS"
None known.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\fBJim Turner\fR turnerjw@wwol.comj
.PP
This code was inspired by BrowseEntry.pm by Rajappa Iyer and Chris Dean and
bears more than a passing resemblance to ComboBox code. This may
be distributed under the same conditions as Perl.
